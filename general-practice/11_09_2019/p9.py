'''
    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
'''

from timeit import default_timer as timer

def total_divisors(number):
    # print(number)
    if number == 1:
        return 1

    factors = []

    while number % 2 == 0:
        factors.append(2)
        number //= 2
    
    limit = int(number ** 0.5) + 1
    for i in range(3, limit, 2):
        while number % i == 0:
            factors.append(i)
            number //= i
    
    if number > 2:
        factors.append(number)

    prod = 1

    number = -1
    count = 0
    # print(factors)
    for fact in factors:
        # print('fact : {}'.format(fact))
        if number == -1:
            number = fact
            count += 1
        else:
            if number == fact:
                count += 1
            else:
                # update product
                prod *= (count + 1)
                # print("prod : {}".format(prod))
                # reset values to latest fact
                number = fact
                count = 1
    if number != -1:
        prod *= (count + 1)
    # print(prod)
    return prod

min_divisors = int(input('Minimum number of divisors for triangular number :: '))

start = timer()

i = 1
while True:
    triangular_number = (i * (i + 1)) // 2
    divisors_count = total_divisors(triangular_number)
    if divisors_count > min_divisors:
        break
    i += 1

end = timer()
print('First triangular number to have more than {} divisors is {}'.format(min_divisors, triangular_number))
print('Time taken is {}'.format(end - start))
