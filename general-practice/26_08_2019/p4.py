'''
    The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways:
    (i) each of the three terms are prime, and,
    (ii) each of the 4-digit numbers are permutations of one another.

    There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property,
    but there is one other 4-digit increasing sequence.

    What 12-digit number do you form by concatenating the three terms in this sequence?
'''

from timeit import default_timer as timer

def precalculateSieve(number):
    # number += 1
    sieve = [True] * number
    primesTable = {}
    primes = []

    sieve[0] = False
    sieve[1] = False

    x = 3
    limit = int(number ** 0.5) + 1
    while x <= limit:
        if sieve[x] == True:
            sieve[x*x::2*x] = [False] * ((number - x*x - 1)//(2*x) + 1)
        x += 2
    
    x = 3
    while x < number:
        if sieve[x]:
            if x > 1487:
                primesTable[x] = True
                primes.append(x)
        x += 2

    return primesTable, primes

def isPermutation(n1, n2):
    i = 0
    arr = [0] * 10

    while n1 != 0:
        idx = n1 % 10
        arr[idx] += 1
        n1 = n1 // 10

    while n2 != 0:
        idx = n2 % 10
        arr[idx] -= 1
        n2 = n2 // 10
    
    while i < 10:
        if arr[i] != 0:
            return False
        i += 1
    
    return True

if __name__ == '__main__':
    start = timer()
    # Since we need maximum of four digits primes
    primesTable, primes = precalculateSieve(10000)

    # print(primesTable)
    length = len(primes)
    i = 0
    notFound = True
    product = 0
    while i < length and notFound:
        j = i + 1
        while j < length - 1 and notFound:
            if isPermutation(primes[i], primes[j]):
                k = primes[j] + (primes[j] - primes[i])
                if k < 10000 and k in primesTable and isPermutation(primes[j], k):
                    notFound = False
                    print(primes[i])
                    print(primes[j])
                    print(k)
                    product = str(primes[i]) + str(primes[j]) + str(k)
            j += 1
        i += 1
    print('12 digits number generated by concatenating three prime numbers in sequence is : {}'.format(product))
    end = timer()
    print('Time taken is : {}'.format(end - start))